# AUTOGENERATED FROM:
#     'db_query/add_payment_to_user.edgeql'
#     'db_query/delete_payment.edgeql'
#     'db_query/delete_user_by_userid.edgeql'
#     'db_query/delete_user_by_uuid.edgeql'
#     'db_query/get_user_by_role.edgeql'
#     'db_query/get_user_telegram_id.edgeql'
#     'db_query/insert_payment.edgeql'
#     'db_query/insert_payment_with_price.edgeql'
#     'db_query/insert_user.edgeql'
# WITH:
#     $ edgedb-py --file


from __future__ import annotations
import dataclasses
import edgedb
import enum
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ResultUUID(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetUserTelegramIdResult(NoPydanticValidation):
    id: uuid.UUID
    UserID: int
    
@dataclasses.dataclass
class GetUserRoleResult(NoPydanticValidation):
    id: uuid.UUID
    UserRole: Role


class Role(enum.Enum):
    ADMINISTRATOR = "Administrator"
    OPERATOR = "Operator"
    CUSTOMER = "Customer"
    BUYER = "Buyer"


async def add_payment_to_user(
    client: edgedb.AsyncIOClient,
    *,
    userId: int,
    paymentId: uuid.UUID,
) -> ResultUUID | None:
    return await client.query_single(
        """\
        with user := (select User filter .UserID = <int64>$userId) update user set { UserPayment += (select Payment filter .id = <uuid>$paymentId)};\
        """,
        userId=userId,
        paymentId=paymentId,
    )


async def delete_payment(
    client: edgedb.AsyncIOClient,
    *,
    paymentId: uuid.UUID,
) -> ResultUUID | None:
    return await client.query_single(
        """\
        with users := 
          (select User filter .UserPayment.id = <uuid>$paymentId)
        update users set { UserPayment -= (select Payment filter .id = <uuid>$paymentId)};
        delete Payment filter .id = <uuid>$paymentId;\
        """,
        paymentId=paymentId,
    )


async def delete_user_by_userid(
    client: edgedb.AsyncIOClient,
    *,
    userId: int,
) -> ResultUUID | None:
    return await client.query_single(
        """\
        delete User filter .UserID = <int64>$userId;\
        """,
        userId=userId,
    )


async def delete_user_by_uuid(
    client: edgedb.AsyncIOClient,
    *,
    userUUID: uuid.UUID,
) -> ResultUUID | None:
    return await client.query_single(
        """\
        delete User filter .id = <uuid>$userUUID;\
        """,
        userUUID=userUUID,
    )


async def get_user_by_role(
    client: edgedb.AsyncIOClient,
    *,
    role: Role,
) -> list[ResultUUID]:
    return await client.query(
        """\
        select User filter .UserRole = <EUserRole>$role\
        """,
        role=role,
    )
    
async def get_user_by_tgid(
    client: edgedb.AsyncIOClient,
    *,
    tgid: int,
) -> list[ResultUUID]:
    return await client.query(
        """\
        select User filter .UserID = <int64>$tgid\
        """,
        tgid=tgid,
    )


async def get_user_telegram_id(
    client: edgedb.AsyncIOClient,
    *,
    id: uuid.UUID,
) -> GetUserTelegramIdResult | None:
    return await client.query_single(
        """\
        select User { UserID } filter .id = <uuid>$id;\
        """,
        id=id,
    )


async def insert_payment(
    client: edgedb.AsyncIOClient,
) -> ResultUUID:
    return await client.query_single(
        """\
        insert Payment;\
        """,
    )


async def insert_payment_with_price(
    client: edgedb.AsyncIOClient,
    *,
    price: int,
) -> ResultUUID:
    return await client.query_single(
        """\
        insert Payment {
            Price := <int64>$price
        };\
        """,
        price=price,
    )


async def insert_user(
    client: edgedb.AsyncIOClient,
    *,
    userId: int,
    userRole: Role,
) -> ResultUUID:
    return await client.query_single(
        """\
        insert User {
            UserID := <int64>$userId,
            UserRole := <EUserRole>$userRole
        };\
        """,
        userId=userId,
        userRole=userRole,
    )


async def get_user_role(
    client: edgedb.AsyncIOClient,
    *,
    id: uuid.UUID,
) -> GetUserRoleResult | None:
    return await client.query_single(
        """\
        select User { Role } filter .id = <uuid>$id;\
        """,
        id=id,
    )
